
# run autostart asynchronously of the handler loop. Path is relative to $HOME
autostart = "/.config/dwm/autostart.sh"

# run autostart_blocking before entering the handler loop. Path is relative to $HOME
autostart_blocking = ""

# border pixel of windows
borderpx = 2

# snap pixel
snap = 32

# horizontal inner gap between windows
gappih = 20

# vertical inner gap between windows
gappiv = 10

# horizontal outer gap between windows and screen edge
gappoh = 10

# vertical outer gap between windows and screen edge
gappov = 30

# 1 means no outer gap when there is only one window
smartgaps = 0

# margin around monitor (note: x and w affects the statusbar)
default_inset.x = 0
default_inset.y = 0
default_inset.w = 0
default_inset.h = 0


##########
# status #
##########

# font array
fonts = [ "monospace:size=10" ]

# 0 means no bar
showbar = 1

# 0 means bottom bar
topbar = 1

# 0 means that dwm will calculate bar height, >= 1 means dwm will usr barheight as bar height
barheight = 0

# vertical space between the statusbar and the edge of the screen
vertpad = 0

# horizontal space between the statusbar and the edge of the screen
sidepad = 0

# 0 means no systray
showsystray = 1

# 0 means sloppy systray follows selected monitor. >0 means pin systray to monitor X
systraypinning = 0

# 0 means systray in the right corner. >0 means systray on the left of status text
systrayonleft = 0

# systray spacing
systrayspacing = 2

# 1: if pinning fails, display systray on the first monitor, 0: display systray on the last monitor
systraypinningfailfirst = 1

# colors
SchemeNorm.ColFg = "#bbbbbb"
SchemeNorm.ColBg = "#222222"
SchemeNorm.Border = "#444444"
SchemeNorm.FgAlpha = 255
SchemeNorm.BgAlpha = 208
SchemeNorm.BorderAlpha = 255

SchemeSel.ColFg = "#eeeeee"
SchemeSel.ColBg = "#005577"
SchemeSel.Border = "#005577"
SchemeSel.FgAlpha = 255
SchemeSel.BgAlpha = 208
SchemeSel.BorderAlpha = 255


###########
# tagging #
###########

# 1 means hide vacant tags
enablehidevacant = 1

tags = [ "1", "2", "3", "4", "5", "6", "7", "8", "9" ]

#########
# rules #
#########

# 1 means windows will be swallowed according to rules
enableswallow = 1

# 1 means swallow floating windows by default
swallowfloating = 0

# valid properties: class, instance, title, tag, isfloating, isterminal, noswallow, iscentered, issticky, monitor
rules = [ { class = "GIMP", isfloating = 1 },
          { class = "St", isterminal = 1 },
          { class = "Firefox", tag = 8, noswallow = -1 },
          { title = "Event Tester", noswallow = 1 }]

###########
# layouts #
###########

# factor of master area size [0.05..0.95]
mfact = 0.55

# number of clients in master area
nmaster = 1

# 1 means respect size hints in tiled resizals
resizehints = 1

# 1 will force focus on the fullscreen window
lockfullscreen = 1

layouts = [ { symbol = "[]=",     arrange = "tile" },
            { symbol = "[M]",     arrange = "monocle" },
            { symbol = "[@]",     arrange = "spiral" },
            { symbol = "[\\]",    arrange = "dwindle" },
            { symbol = "H[]",     arrange = "deck" },
            { symbol = "TTT",     arrange = "bstack" },
            { symbol = "===",     arrange = "bstackhoriz" },
            { symbol = "HHH",     arrange = "grid" },
            { symbol = "###",     arrange = "nrowgrid" },
            { symbol = "---",     arrange = "horizgrid" },
            { symbol = ":::",     arrange = "gaplessgrid" },
            { symbol = "|M|",     arrange = "centeredmaster" },
            { symbol = ">M>",     arrange = "centeredfloatingmaster" },
            { symbol = "><>",     arrange = "NULL" } ]


############
# bindings #
############

# see sxhkd / sxhkdrc for key bindings

# button definitions
# click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin
# mask can be super, alt, ctrl, shift
buttons = [ { click = "ClkLtSymbol",    mask = 0,       button = "button1",   function = "setlayout",       argument = { } },
            { click = "ClkLtsymbol",    mask = 0,       button = "button3",   function = "setlayout",       argument = 2 },
            { click = "ClkWinTitle",    mask = 0,       button = "button2",   function = "quit",            argument = { } },
            { click = "ClkStatusText",  mask = 0,       button = "button2",   function = "spawn",           argument = [ "st" ] },
            { click = "ClkClientWin",   mask = "alt",   button = "button1",   function = "movemouse",       argument = { } },
            { click = "ClkClientWin",   mask = "alt",   button = "button2",   function = "togglefloating",  argument = { } },
            { click = "ClkClientWin",   mask = "alt",   button = "button3",   function = "resizemouse",     argument = { } },
            { click = "ClkTagBar",      mask = 0,       button = "button1",   function = "view",            argument = { } },
            { click = "ClkTagBar",      mask = 0,       button = "button3",   function = "toggleview",      argument = { } },
            { click = "ClkTagBar",      mask = "alt",   button = "button1",   function = "tag",             argument = { } },
            { click = "ClkTagBar",      mask = "alt",   button = "button3",   function = "toggletag",       argument = { } } ]
